# --------------------------------------------------
# Overleaf Base Image (sharelatex/sharelatex-base)
# --------------------------------------------------
FROM phusion/baseimage:hirsute

# Makes sure LuaTex cache is writable
# -----------------------------------
ENV TEXMFVAR=/var/lib/sharelatex/tmp/texmf-var

CMD ["bash"]

# Install dependencies
# --------------------
RUN apt-get update \
&&  apt-get install -y \
      build-essential wget net-tools unzip time imagemagick optipng strace nginx git python zlib1g-dev libpcre3-dev htop p7zip-full \
      qpdf \
      aspell aspell-en aspell-af aspell-am aspell-ar aspell-ar-large aspell-bg aspell-bn aspell-br aspell-ca aspell-cs aspell-cy aspell-da aspell-de aspell-el aspell-eo aspell-es aspell-et aspell-eu-es aspell-fa aspell-fo aspell-fr aspell-ga aspell-gl-minimos aspell-gu aspell-he aspell-hi aspell-hr aspell-hsb aspell-hu aspell-hy aspell-id aspell-is aspell-it aspell-kk aspell-kn aspell-ku aspell-lt aspell-lv aspell-ml aspell-mr aspell-nl aspell-nr aspell-ns  aspell-pa aspell-pl aspell-pt aspell-pt-br aspell-ro aspell-ru aspell-sk aspell-sl aspell-ss aspell-st aspell-sv aspell-tl aspell-tn aspell-ts aspell-uk aspell-uz aspell-xh aspell-zu \
    \
# install Node.JS 16 LTS
&&  curl -sSL https://deb.nodesource.com/setup_16.x | bash - \
&&  apt-get install -y nodejs \
    \
&&  rm -rf \
# We are adding a custom nginx config in the main Dockerfile.
      /etc/nginx/nginx.conf \
      /etc/nginx/sites-enabled/default \
      /var/lib/apt/lists/*

# Add envsubst
# ------------
ADD server-ce/vendor/envsubst /usr/bin/envsubst
RUN chmod +x /usr/bin/envsubst

# Install TexLive
# ---------------
# CTAN mirrors occasionally fail, in that case install TexLive against an
# specific server, for example http://ctan.crest.fr
#
# # docker build \
#     --build-arg TEXLIVE_MIRROR=http://ctan.crest.fr/tex-archive/systems/texlive/tlnet \
#     -f Dockerfile-base -t sharelatex/sharelatex-base .
ENV PATH "${PATH}:/usr/local/texlive/2022/bin/x86_64-linux"

ARG TEXLIVE_MIRROR=http://mirror.ctan.org/systems/texlive/tlnet

# RUN mkdir /install-tl-unx \
# &&  curl -sSL \
#       ${TEXLIVE_MIRROR}/install-tl-unx.tar.gz \
#     | tar -xzC /install-tl-unx --strip-components=1 \
#     \
# &&  echo "tlpdbopt_autobackup 0" >> /install-tl-unx/texlive.profile \
# &&  echo "tlpdbopt_install_docfiles 0" >> /install-tl-unx/texlive.profile \
# &&  echo "tlpdbopt_install_srcfiles 0" >> /install-tl-unx/texlive.profile \
# &&  echo "selected_scheme scheme-basic" >> /install-tl-unx/texlive.profile \
#     \
# &&  /install-tl-unx/install-tl \
#       -profile /install-tl-unx/texlive.profile \
#       -repository ${TEXLIVE_MIRROR} \
#     \
# &&  tlmgr install --repository ${TEXLIVE_MIRROR} \
#       latexmk \
#       texcount \
#       synctex \
#     \
# &&  rm -rf /install-tl-unx

SHELL ["/bin/bash", "-c"] 

# Potentially faster method: Install TexLive by downloading a full ISO first
# Even though the full ISO is 4GB, the complete installation process is still faster than running install-tl
# on even the fastest mirror. This is because install-tl opens many connections (ftp) 
RUN mkdir /iso \
&&  pushd /iso \
&&  wget --no-verbose --show-progress --progress=bar:force:noscroll "${TEXLIVE_MIRROR}/../Images/texlive2022.iso" -O image.iso \
&&  echo "tlpdbopt_autobackup 0" >> texlive.profile \
&&  echo "tlpdbopt_install_docfiles 0" >> texlive.profile \
&&  echo "tlpdbopt_install_srcfiles 0" >> texlive.profile \ 
# The original overleaf build script only installs basic texlive packages, 
# but it doens't include many packages that literally all latex templates need, so I'm switching to scheme-full
&&  echo "selected_scheme scheme-full" >> texlive.profile \
&&  7z x image.iso \
&&  ls -lah \
&&  chmod +x install-tl \
&&  ./install-tl -profile texlive.profile \
&&  tlmgr update --self \
&&  tlmgr install latexmk texcount synctex \
&&  popd \
&&  rm -rf /iso


# Set up sharelatex user and home directory
# -----------------------------------------
RUN adduser --system --group --home /overleaf --no-create-home sharelatex && \
	mkdir -p /var/lib/sharelatex && \
	chown www-data:www-data /var/lib/sharelatex && \
	mkdir -p /var/log/sharelatex && \
	chown www-data:www-data /var/log/sharelatex && \
	mkdir -p /var/lib/sharelatex/data/template_files && \
	chown www-data:www-data /var/lib/sharelatex/data/template_files
